// Partial
//1.
type Product11 = { name: string; price: number; stock: number }
type ProductUpdate = Partial<Product11>

//2.
function updateProduct(product: Product11, update: Partial<Product11>): Product11 {
    return {...product,...update}
}

type Profile12 = {
    id: string;
    username: string;
    avatarUrl: string;
}

//3.
type EditableProfile = { id: string } & Partial<Omit<Profile12, "id">>

//Required + Readonly

//2.1

type User = {
    name?: string;
    email?: string;
}

// üëâ ‡∏™‡∏£‡πâ‡∏≤‡∏á type ‡πÉ‡∏´‡∏°‡πà‡∏ä‡∏∑‡πà‡∏≠ FullUser ‡∏ó‡∏µ‡πà‡∏ó‡∏∏‡∏Å field ‡πÄ‡∏õ‡πá‡∏ô required
type FullUser = Required<User>
// ‚úÖ Expected:
// type FullUser = { name: string; email: string }

//2.2
type Product22 = {
    id: string;
    price: number;
  }
  
  // üëâ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ä‡∏∑‡πà‡∏≠ `staticProduct` ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô readonly ‡∏ó‡∏±‡πâ‡∏á object
  const staticProduct: Readonly<Product22> = {id:"2",price:2000}
  // ‚úÖ ‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡∏°‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ TypeScript ‡πÇ‡∏ß‡∏¢‡∏ß‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢
  
//2.3
type Settings = {
    theme: string;
    sound: boolean;
    notifications: boolean;
  }
  
  // üëâ ‡∏™‡∏£‡πâ‡∏≤‡∏á type `UpdateSettings` ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡∏ö‡∏≤‡∏á field ‡πÑ‡∏î‡πâ (optional) 
  type UpdateSettings = Readonly<Partial<Settings>>
  // ‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡πÉ‡∏™‡πà‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡πâ‡∏≠‡∏á **‡∏´‡πâ‡∏≤‡∏°‡πÅ‡∏Å‡πâ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á**
  // ‚úÖ ‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á:
  // type UpdateSettings = Readonly<Partial<Settings>>


// Pick Omit

//3.1
type Product31 = {
    id: string;
    name: string;
    description: string;
    price: number;
  }
  
// üëâ ‡∏™‡∏£‡πâ‡∏≤‡∏á type ProductPreview ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÅ‡∏Ñ‡πà name ‡∏Å‡∏±‡∏ö price
type ProductPreview = Pick<Product31, "name" | "price">

//3.2
type Admin = {
    id: string;
    name: string;
    email: string;
    password: string;
  }
  
  // üëâ ‡∏™‡∏£‡πâ‡∏≤‡∏á type AdminPublic ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ password
  type AdminPublic = Omit<Admin,"password">  

//3.3 Pick / Omit / Partial
type Settings33 = {
    theme: string;
    sound: boolean;
    notifications: boolean;
  }
  
  // üëâ ‡∏™‡∏£‡πâ‡∏≤‡∏á type OptionalSettings ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ sound ‡∏Å‡∏±‡∏ö notifications ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô optional ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  type OptionalSettings = Partial<Pick<Settings33,"sound" | "notifications">>
  // ‚úÖ ‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á: Partial<Pick<Settings, "sound" | "notifications">>

//bonus ‡∏ï‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏£‡∏≤‡∏∞ ‡∏ù‡∏±‡πà‡∏á‡∏ã‡πâ‡∏≤‡∏¢‡πÅ‡∏°‡πà‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏Ñ‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡∏ù‡∏±‡πà‡∏á‡∏Ç‡∏ß‡∏≤‡πÑ‡∏î‡πâ‡∏™‡∏≠‡∏á
  
// infer

//4.1
                        //‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÅ‡∏´‡∏•‡∏∞ pattern 
type GetReturn<T> = T extends (...arg: any[]) => infer R ? R : never 
//‡∏Å‡∏π‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à infer ‡∏•‡∏∞ ‡πÑ‡∏≠‡∏´‡∏•‡∏±‡∏á extend ‡∏°‡∏±‡∏ô‡∏Å‡πá‡∏Ñ‡∏∑‡∏≠ propety ‡∏Ç‡∏≠‡∏á type ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á type ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÉ‡∏ä‡πà‡∏õ‡∏∞

            //‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÅ‡∏´‡∏•‡∏∞‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏≠‡∏≤‡πÑ‡∏õ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô
type Fn1 = () => string
type Fn2 = (a: number, b: number) => number[]

type R1 = GetReturn<Fn1> // ‚ùì ‡πÑ‡∏î‡πâ string
type R2 = GetReturn<Fn2> // ‚ùì ‡πÑ‡∏î‡πâ number[]

//4.2
type UnwrapPromise<T> = T extends Promise<infer P> ? P : never

type A42 = Promise<string>
type B = Promise<{ id: number }>

type T1 = UnwrapPromise<A> // ‚ùì ‡πÑ‡∏î‡πâ string
type T2 = UnwrapPromise<B> // ‚ùì ‡πÑ‡∏î‡πâ { id: number }

//4.3
type FnList = [() => string, () => number, () => boolean]

type AllReturns<T> = T extends Array<(...args: any[]) => infer P> ? P : never // ‡∏°‡∏∂‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏≠‡∏á‡πÄ‡∏•‡∏¢ infer ‡∏¢‡∏±‡∏á‡πÑ‡∏á‡πÉ‡∏´‡πâ‡∏°‡∏±‡∏ô‡πÑ‡∏î‡πâ union

type Result = AllReturns<FnList> // ‚ùì ‡πÑ‡∏î‡πâ string | number | boolean


// infer ‡∏ã‡πâ‡∏≠‡∏ô infer 

//5.1 
type WithHandler = {
  name: string;
  handler: () => number[]
}

// üëâ ‡∏™‡∏£‡πâ‡∏≤‡∏á `ExtractHandlerReturn<T>`
type ExtractHandlerReturn<T, K extends keyof T> = T[K] extends (...args:any[]) => infer R? R : never
// ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÑ‡∏î‡πâ return type ‡∏Ç‡∏≠‡∏á method `handler` ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
// ‚ùì ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: number[]

//5.2
type A52 = Promise<Promise<string>>
type B52 = Promise<number>
type C52 = string

// üëâ ‡∏™‡∏£‡πâ‡∏≤‡∏á `DeepUnwrap<T>` ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á type ‡∏•‡∏∂‡∏Å‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á promise ‡∏ã‡πâ‡∏≠‡∏ô‡πÜ
type DeepUnwrap<T> =   T extends Promise<infer U> ? DeepUnwrap<U> : T;
// ‚ùì A = string
// ‚ùì B = number
// ‚ùì C = string (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)

//5.3
type API = {
  getUser: () => string;
  getAge: () => number;
  getOnline: () => boolean;
}

// üëâ ‡∏™‡∏£‡πâ‡∏≤‡∏á `AllReturns<T>` ‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏° return type ‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ô object T
type AllReturns2<T> = T[keyof T] extends (...args: any) => infer P? P : never
// ‚ùì ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: string | number | boolean

//5.4
type Events = {
  click: (x: number) => void
  drag: (x: number, y: number) => void
}

// üëâ ‡∏™‡∏£‡πâ‡∏≤‡∏á `AllArgs<T>` ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô union ‡∏Ç‡∏≠‡∏á args ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
type AllArgs<T> = T[keyof T] extends (...arg: infer P) => void ? P : never
// ‚ùì ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: [number] | [number, number]

//bonus
type A_bonus5 = string[][]
type B_bonus5 = number[][][]
type C_bonus5 = string

type Flatten<T> = T extends (infer P)[] ? Flatten<P> : T;

type R1_bonus5 = Flatten<A_bonus5> // string
type R2_bonus5 = Flatten<B_bonus5> // number
type R3_bonus5 = Flatten<C_bonus5> // string








  



  